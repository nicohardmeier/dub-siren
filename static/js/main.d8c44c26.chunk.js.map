{"version":3,"sources":["components/Syren.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Syren","props","osc","mod","ctx","playing","AudioContext","Tone","Oscillator","toMaster","LFO","connect","frequency","start","state","volume","tone","mod_rate","value","trigger","bind","setVolume","setTone","setMod","console","log","this","playSound","stopSound","stop","className","onClick","interaction","onChange","min","max","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2TAIqBA,E,YAMjB,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KANVC,SAKmB,IAJnBC,SAImB,IAHnBC,SAGmB,IAFnBC,SAAmB,EAKf,EAAKD,IAAM,IAAIE,aACf,EAAKJ,IAAM,IAAIK,IAAKC,WAAW,IAAK,QAAQC,WAC5C,EAAKN,IAAM,IAAII,IAAKG,IAAI,EAAG,EAAG,KAC9B,EAAKP,IAAIQ,QAAQ,EAAKT,IAAIU,WAAWC,QACrC,EAAKC,MAAQ,CACTC,OAAQ,EACRC,KAAM,IACNb,IAAK,EACLc,SAAU,GAGd,EAAKf,IAAIa,OAAOG,OAAS,GAEzB,EAAKC,QAAU,EAAKA,QAAQC,KAAb,gBACf,EAAKC,UAAY,EAAKA,UAAUD,KAAf,gBACjB,EAAKE,QAAU,EAAKA,QAAQF,KAAb,gBACf,EAAKG,OAAS,EAAKA,OAAOH,KAAZ,gBAnBC,E,uEAwBfI,QAAQC,IAAI,aACS,IAAjBC,KAAKrB,QACLqB,KAAKC,YAGLD,KAAKE,YAETF,KAAKrB,SAAWqB,KAAKrB,U,kCAIrBqB,KAAKxB,IAAIW,U,kCAGTa,KAAKxB,IAAI2B,S,gCAEHX,GACN,OAAQQ,KAAKxB,IAAIa,OAAOG,MAAQA,I,8BAE5BA,GACJ,OAAQQ,KAAKxB,IAAIU,UAAUM,MAAQA,I,6BAEhCA,GACH,OAAQQ,KAAKvB,IAAIS,UAAUM,MAAQA,I,+BAInC,OACI,yBAAKY,UAAU,oBACX,yCACA,yBAAKA,UAAU,mBACX,yBAAKA,UAAU,4BACX,yBAAKC,QAASL,KAAKP,QAASW,UAAU,YAEtC,uCAEJ,yBAAKA,UAAU,sBACX,kBAAC,IAAD,CAAME,YAAa,SAAUC,SAAUP,KAAKL,UAAWH,OAAQ,IAAKgB,KAAM,IAAKC,IAAK,IACpF,sCAEJ,yBAAKL,UAAU,mBACX,kBAAC,IAAD,CAAME,YAAa,SAAUC,SAAUP,KAAKJ,QAASJ,MAAO,IAAKgB,IAAK,EAAGC,IAAK,MAC9E,oCAEJ,yBAAKL,UAAU,kBACX,kBAAC,IAAD,CAAME,YAAa,SAAUC,SAAUP,KAAKH,OAAQL,MAAO,EAAGgB,IAAK,EAAGC,IAAK,KAC3E,yC,GA5EWC,aCUpBC,EARO,WACpB,OACE,yBAAKP,UAAU,OACb,kBAAC,EAAD,QCGcQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.d8c44c26.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Dial } from 'react-nexusui';\nimport Tone from 'tone';\n\nexport default class Syren extends Component {\n    osc: any;\n    mod:any;\n    ctx: AudioContext;\n    playing: Boolean = false;\n\n    constructor(props) {\n        super(props);\n        // eslint-disable-next-line\n        this.ctx = new AudioContext;\n        this.osc = new Tone.Oscillator(440, 'sine').toMaster();\n        this.mod = new Tone.LFO(0, 0, 400);\n        this.mod.connect(this.osc.frequency).start();\n        this.state = {\n            volume: 1,\n            tone: 120,\n            mod: 0,\n            mod_rate: 0,\n        };\n        //SEt intial volume\n        this.osc.volume.value = -10;\n        // This binding is necessary to make `this` work in the callback\n        this.trigger = this.trigger.bind(this);\n        this.setVolume = this.setVolume.bind(this);\n        this.setTone = this.setTone.bind(this);\n        this.setMod = this.setMod.bind(this);\n\n    }\n\n    trigger() {\n        console.log('sound!!!');\n        if (this.playing === false) {\n            this.playSound();\n        }\n        else {\n            this.stopSound();\n        }\n        this.playing = !this.playing;\n    }\n\n    playSound() {\n        this.osc.start();\n    }\n    stopSound() {\n        this.osc.stop();\n    }\n    setVolume(value) {\n        return  this.osc.volume.value = value;\n    }\n    setTone(value) {\n        return  this.osc.frequency.value = value;\n    }\n    setMod(value) {\n        return  this.mod.frequency.value = value;\n    }\n\n    render() {\n        return (\n            <div className=\"syren__container\">\n                <h1>Dub Siren</h1>\n                <div className=\"dial__container\">\n                    <div className=\"dial__slot trigger__slot\">\n                        <div onClick={this.trigger} className=\"trigger\">\n                        </div>\n                        <p>TRIGGER</p>\n                    </div>\n                    <div className=\"dial__slot volumen\">\n                        <Dial interaction={\"radial\"} onChange={this.setVolume} value={-100} min={-100} max={1}/>\n                        <p>VOLUME</p>\n                    </div>\n                    <div className=\"dial__slot tone\">\n                        <Dial interaction={\"radial\"} onChange={this.setTone} value={200} min={0} max={880}/>\n                        <p>TONE</p>\n                    </div>\n                    <div className=\"dial__slot mod\">\n                        <Dial interaction={\"radial\"} onChange={this.setMod} value={0} min={0} max={10}/>\n                        <p>MOD</p>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n","import React from 'react';\nimport './App.css';\nimport Syren from './components/Syren';\n\n\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <Syren />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}